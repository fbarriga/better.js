var jsDoced=function(originalFct){var stackFrame=Better.stack()[1];var jsdocContent=jsDoced.extractJsdoc(stackFrame.url,stackFrame.line);var output=jsDoced.parseJsdoc(jsdocContent);if(output.isClass){var attributes=jsDoced.jsdocToBetterClass(output);var betterClass=Better.Class(originalFct,attributes);return betterClass}else{var attributes=jsDoced.jsdocToBetterFunction(output);var betterFct=Better.Function(originalFct,attributes);return betterFct}console.assert(false,"this point should not be reached")};if(typeof window==="undefined")module.exports=jsDoced;jsDoced.extractJsdoc=function(url,bottomLine){var inBrowser=typeof window!=="undefined"?true:false;var cache=jsDoced.extractJsdoc.cache;if(cache[url]!==undefined){var content=cache[url]}else if(inBrowser){var request=new XMLHttpRequest;var content;request.onload=function(){content=request.responseText};request.open("get",url,false);request.send()}else{var content=require("fs").readFileSync(url,"utf8")}cache[url]=content;var jsdocContent=parseFileContent(content);return jsdocContent;function parseFileContent(content){var lines=content.split("\n");var lineEnd=bottomLine-2;for(var lineStart=lineEnd;lineStart>=0;lineStart--){var line=lines[lineStart];var matches=line.match(/^\s*\/\*\*\s*$/);var isJsdocHead=matches!==null?true:false;if(isJsdocHead===true)break}var jsdocContent=lines.slice(lineStart,lineEnd+1).join("\n");return jsdocContent}};jsDoced.extractJsdoc.cache={};var jsDoced=jsDoced||{};jsDoced.jsdocToBetterType=function(type){if(type.toLowerCase()==="number"){return Number}else if(type.toLowerCase()==="string"){return String}else console.warn("unhandled type",type);return undefined};jsDoced.jsdocToBetterClass=function(output){var convertType=jsDoced.jsdocToBetterType;var options={};options.arguments=[];Object.keys(output.params).forEach(function(paramName){var param=output.params[paramName];var argument=convertType(param.type);options.arguments.push(argument)});options.privatize=true;return options};jsDoced.jsdocToBetterFunction=function(output){var convertType=jsDoced.jsdocToBetterType;var options={};options.arguments=[];Object.keys(output.params).forEach(function(paramName){var param=output.params[paramName];var argument=convertType(param.type);options.arguments.push(argument)});if(output.return){options.return=convertType(output.return.type)}return options};var jsDoced=jsDoced||{};jsDoced.parseJsdoc=function(jsdocContent){var lines=jsdocContent.split("\n");lines.pop();lines.shift();for(var i=0;i<lines.length;i++){lines[i]=lines[i].replace(/^(\s*\*\s*)/,"")}var output={params:{},tags:{}};for(var i=0;i<lines.length;i++){var line=lines[i];var matches=line.match(/^@([^\s])+/);if(matches!==null)continue;if(output.description===undefined){output.description=""}output.description+=line.trim()}lines.forEach(function(line){if(line.match(/^@/)===null)return;var matches=line.match(/^@([^\s])+/);var tagName=matches[0].replace(/^@/,"").toLowerCase();if(tagName==="param"){var matches=line.match(/^@([^\s]+)\s+{([^\s]+)}\s+([^\s]+)\s+(.*)$/);console.assert(matches.length===5);var paramType=matches[2];var paramName=matches[3];var paramDescription=matches[4];output.params[paramName]={type:paramType,description:paramDescription}}else if(tagName==="return"){var matches=line.match(/^@([^\s]+)\s+{([^\s]+)}\s+(.*)$/);console.assert(matches.length===4);var paramType=matches[2];var paramDescription=matches[3];output.return={type:paramType,description:paramDescription}}else{output.tags=output.tags||{};output.tags[tagName]=true}});var hasConstructor=Object.getOwnPropertyNames(output.tags).indexOf("constructor")!==-1?true:false;var hasClass=output.tags.class?true:false;output.isClass=hasClass||hasConstructor?true:false;if(Object.keys(output.params).length===0)delete output.params;if(Object.keys(output.tags).length===0)delete output.tags;return output};