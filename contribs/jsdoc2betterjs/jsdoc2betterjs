#!/usr/bin/env node

var recast	= require("recast");
var builders	= recast.types.builders;

var jsdocParse	= require('./utils/jsdocParse.js')
var jsdocExpr	= require('./utils/jsdocExpression.js')

//////////////////////////////////////////////////////////////////////////////////
//		Inline help
//////////////////////////////////////////////////////////////////////////////////
if( process.argv[2] === '-h' ){
	console.log('Usage: jsdoc2betterjs [options] path/to/file.js')
	console.log('')
	console.log('Makes sure jsdoc is respected during execution.')
	console.log('More about better.js at http://betterjs.org')

	console.log('')
	console.log('Options:')
	console.log('\t-h	Display inline help')
	console.log('')
	console.log('\t-v	Display version')
	console.log('')
	process.exit()
}
if( process.argv[2] === '-v' ){
	var packageJson	= require('./../../package.json')
	console.log(packageJson.version)
	process.exit()
}

//////////////////////////////////////////////////////////////////////////////////
//		pre read source file content
//////////////////////////////////////////////////////////////////////////////////
// read the content
// - it is used to parse the jsdoc parts more easily
var filename	= process.argv[2]
var content	= require('fs').readFileSync(filename, 'utf8')
var contentLines= content.split('\n')


// launch recast.run()
recast.run(function(ast, callback) {
	recast.visit(ast, {
		/**
		 * receive the FunctionExpression node
		 */
		visitFunctionExpression: function(path) {
			// console.log('FunctionExpression', path.value)

			// call the subtree
			// NOTE: must be before path.replace() to avoid reccursive infinite loop (creating function in function)
			this.traverse(path)

			// get jsdocContent for this node
			var lineNumber		= path.value.loc.start.line-1
			var jsdocContent	= jsdocParse.extractJsdocContent(contentLines, lineNumber)
			// if no jsdocContent, do nothing
			if( jsdocContent === null )	return

			// produce the callExpression to replace this node
			var functionExpression	= path.value
			var callExpression	= jsdocExpr.jsContent2CallExpression(jsdocContent, functionExpression)

			// actually replace the node
			path.replace(callExpression)
		},
	});

	// NOTE: disabled this line to avoid display the outputed source
	callback(ast);
}, {
	// Options for recast - those are my personal preferences
	tabWidth	: 8,
	useTabs		: true,
	// sourceFileName	: 'map.json',
});

